# -*- coding: utf-8 -*-
"""COVID.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17qruYupQAM3Qs9wrxHi2bzPJUxIqQZY0
"""

!unzip "/content/drive/MyDrive/COVID-19/COVID-19_Radiography_Dataset.zip"

import os
os.listdir("/content/COVID-19_Radiography_Dataset/COVID")

print("lists of the images in the covid folder")
len(os.listdir("/content/COVID-19_Radiography_Dataset/COVID/images"))

print("lists of the images in the normal folder")
len(os.listdir("/content/COVID-19_Radiography_Dataset/Normal/images"))

import cv2
import matplotlib.pyplot as plt

img=cv2.imread("/content/COVID-19_Radiography_Dataset/Normal/images/Normal-10000.png")
plt.imshow(img)

img.shape

import pandas as pd
df=pd.read_excel('/content/COVID-19_Radiography_Dataset/COVID.metadata.xlsx')
df.head()

urls=os.listdir("COVID-19_Radiography_Dataset/COVID/images")

path="COVID-19_Radiography_Dataset/COVID/images/"+ urls[0]
path

import cv2

def loadImages(path, urls, target):
    images = []
    labels = []
    for i in range(len(urls)):
        img_path = path + "/" + urls[i]
        img = cv2.imread(img_path)
        # img = cv2.resize(img, (200, 200))
        images.append(img)
        labels.append(target)
    return images, labels

covid_path="COVID-19_Radiography_Dataset/COVID/images"
covidurl=os.listdir(covid_path)

covidimages,covidtargets= loadImages(covid_path,covidurl,1)

Normal_path="COVID-19_Radiography_Dataset/Normal/images"
Normalurl=os.listdir(Normal_path)

NormalImages,Normaltargets= loadImages(Normal_path,Normalurl,0)

import numpy as np
covidimages=np.asarray(covidimages)
NormalImages=np.asarray(NormalImages)

covidimages.shape

NormalImages.shape

data=np.r_[covidimages,NormalImages]

data.shape

from PIL import Image

data = [np.array(Image.fromarray(img).resize((40,40))) for img in data]

data = np.array(data)
data.shape

target = np.r_[covidtargets, Normaltargets]

target.shape

data=data/255.0

from sklearn.model_selection import train_test_split

x_train,x_test,y_train,y_test=train_test_split(data,target,test_size=0.20)

import tensorflow as tf
import keras
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense

model = Sequential([
    Conv2D(filters=32, kernel_size=(3, 3), activation='relu', input_shape=(40,40,3)),
    MaxPooling2D(),

    Conv2D(filters=64, kernel_size=(3, 3), activation='relu'),
    MaxPooling2D(),

    Conv2D(filters=16, kernel_size=(3, 3), activation='relu'),
    MaxPooling2D(),

    Flatten(),

    Dense(512, activation='relu'),
    Dense(1028, activation='relu'),
    Dense(128, activation='relu'),

    Dense(1, activation='sigmoid')
])

model.summary()

# Assuming you have boolean labels (True/False)
y_train_binary = y_train.astype(int)
y_test_binary = y_test.astype(int)

# model.fit(x_train,y_train,steps_per_epoch=8,epochs=10,validation_steps=2,validation_data=(x_test,y_test))
model.compile(loss=keras.losses.binary_crossentropy, optimizer="adam", metrics=['accuracy'])
batch_size=16
model.fit(
    x_train,
    y_train,
    batch_size=batch_size,
    steps_per_epoch=len(x_train) // batch_size,
    epochs=10,
    validation_data=(x_test, y_test),
    validation_steps=len(x_test) // batch_size
)

plt.plot(model.history.history['accuracy'], label='train Acc')
plt.plot(model.history.history['val_accuracy'],label='test Acc')
plt.legend()
plt.show()

plt.plot(model.history.history['loss'], label='train loss')
plt.plot(model.history.history['val_loss'],label='test loss')
plt.legend()
plt.show()

y_pred = model.predict(x_test)
print(y_pred)
y_pred_binary = (y_pred > 0.5).astype(int)

print(y_pred_binary)

from sklearn.metrics import confusion_matrix, classification_report, accuracy_score

conf_matrix = confusion_matrix(y_test, y_pred_binary)
print("Confusion Matrix:")
print(conf_matrix)

class_report = classification_report(y_test, y_pred_binary)
print("\nClassification Report:")
print(class_report)

accuracy = accuracy_score(y_test, y_pred_binary)
print("\nAccuracy Score:", accuracy)

model.evaluate(x_test,y_test)